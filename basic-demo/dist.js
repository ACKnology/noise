(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.noise = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var stringToBinary = require('string-to-binary');
var binaryToString = require('binary-to-string');

var Audio = window.AudioContext || window.webkitAudioContext;
var context = new Audio();
var SAMPLE_RATE = context.sampleRate;
var bufferFrameSize = 2048;
var low = 2125;
var high = 2295;
var lastTime = 0;

function getNumberOfPaddingBits(bitsPerSecond) {
  return Math.ceil(bitsPerSecond / 2) + 2;
}

function decode(out, baud) {
  var BitThreshold = 65 - 0.18 * baud;

  var unmap = out.map(function (v) {
    return v.m > BitThreshold ? 1 : 0;
  });
  var unpadded = unpadSignal(unmap, baud);

  document.querySelector('#output').innerHTML = binaryToString(unpadded.join(''));
}

function unpadSignal(bits, bitsPerSecond) {
  bits = bits.slice(getNumberOfPaddingBits(bitsPerSecond));
  return bits.slice(0, -getNumberOfPaddingBits(bitsPerSecond));
}

function padSignal(bits, bitsPerSecond) {
  var padBits = '';

  for (var i = 0; i < getNumberOfPaddingBits(bitsPerSecond); ++i) {
    padBits += i < getNumberOfPaddingBits(bitsPerSecond) - 2 ? '1' : 0;
  }

  return padBits + bits + padBits;
}

function hamming(n, N) {
  return 0.54 - 0.47 * Math.cos(2 * Math.PI * n / N);
}

function goertzel(k, binsPerBit, raw, out) {
  var realW = 2 * Math.cos(2 * Math.PI * k / binsPerBit);
  var imagW = Math.sin(2 * Math.PI * k / binsPerBit);

  while (raw.length >= binsPerBit) {
    var chunk = raw.slice(0, binsPerBit);
    raw = raw.slice(binsPerBit);
    var d1 = 0;
    var d2 = 0;

    for (var i = 0; i < binsPerBit; ++i) {
      var x = chunk[i];
      x *= hamming(x, binsPerBit);
      var y = x + realW * d1 - d2;
      d2 = d1;
      d1 = y;
    }

    var r = 0.5 * realW * d1 - d2;
    var im = imagW * d1;

    out.push({
      real: r,
      imag: im * d1,
      m: 20 * Math.log(Math.sqrt(Math.pow(r, 2) + Math.pow(im, 2)))
    });
  }

  return raw;
}

function run(b, message) {
  var baud = b || 45.45;
  var binsPerBit = Math.ceil(SAMPLE_RATE / baud);

  var out = [];
  var data = padSignal(stringToBinary(message || document.querySelector('#input').value), baud);
  var remainder = [];
  var k = 0.5 + binsPerBit * high / SAMPLE_RATE;
  var length = 1 / baud;

  var osc = context.createOscillator();
  var processor = context.createScriptProcessor(bufferFrameSize, 1, 1);

  osc.connect(processor);
  osc.connect(context.destination);
  processor.connect(context.destination);

  processor.onaudioprocess = function (e) {
    var processData = e.inputBuffer.getChannelData(0);
    remainder = remainder.concat(Array.prototype.slice.call(processData, 0));
    remainder = goertzel(k, binsPerBit, remainder, out);
  };

  data.split('').forEach(function (v, i) {
    osc.frequency.setValueAtTime(v == '1' ? high : low, i * length + context.currentTime);
  });

  osc.start(context.currentTime);
  osc.frequency.value = 0;

  osc.stop(data.length * length + context.currentTime);
  lastTime = data.length * length;

  osc.onended = function () {
    osc.disconnect(processor);
    osc.disconnect(context.destination);
    processor.disconnect(context.destination);
    decode(out, baud);
  };
}

module.exports = {
  run: run
};

},{"binary-to-string":2,"string-to-binary":3}],2:[function(require,module,exports){
module.exports = function(binary) {
  var out = '';
  while(binary.length >= 8) {
   var byte = binary.slice(0, 8);
   var binary = binary.slice(8);
   out += String.fromCharCode(parseInt(byte, 2));
  }

  return out;
}

},{}],3:[function(require,module,exports){
module.exports = function(str) {
  var pad = "00000000";

  return str.split('').map(function(str) {
    var binary = str.charCodeAt(0).toString(2);

    return pad.slice(binary.length)+binary;
  }).join('');
}

},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;base64,
