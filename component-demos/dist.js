(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.noise = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var Audio = window.AudioContext || window.webkitAudioContext;
var context = new Audio();
var osc = undefined;
var rawAudio = [];
var prevText = '';
var processor = undefined;

function startOsc() {
  osc = context.createOscillator();
  processor = context.createScriptProcessor(256, 1, 1);
  osc.connect(processor);
  osc.connect(context.destination);
  processor.connect(context.destination);
  processor.onaudioprocess = handleAudio;
  osc.start();
}

function handleAudio(e) {
  var processData = e.inputBuffer.getChannelData(0);
  rawAudio = rawAudio.concat(Array.prototype.slice.call(processData, 0));
}

function plotWave() {
  var canvas = document.querySelector('canvas');
  var ctx = canvas.getContext('2d');
  var height = canvas.height;
  var width = canvas.width;

  ctx.clearRect(0, 0, width, height);
  ctx.beginPath();
  ctx.strokeStyle = 'rgba(0,0,0,0.2)';
  rawAudio.forEach(function (v, i, arr) {
    ctx.lineTo(i / arr.length * width, (v + 1) / 2 * height);
  });
  ctx.stroke();
}

function updateOsc() {
  if (!osc) {
    startOsc();
  }

  osc.frequency.value = parseInt(document.querySelector('input[type="range"]').value, 10);
}

function stopOsc() {
  osc && osc.disconnect(context.destination);
  osc = null;
}

function encodeString(string, outputContainer) {
  outputContainer.innerHTML = require('string-to-binary')(string);
}

function pulseOsc(binary) {
  binary.split('').forEach(function (v, i) {
    // 0.022 roughly 45.45 baud
    osc.frequency.setValueAtTime(v == '1' ? 4000 : 1000, i * 0.022 + context.currentTime);
  });
  osc.frequency.setValueAtTime(0, (binary.length + 1) * 0.022 + context.currentTime);
  setTimeout(function () {
    requestAnimationFrame(plotWave);
  }, (binary.length + 3) * 0.022 + context.currentTime);
}

function onStringChangeToWave(string, outputContainer) {
  if (prevText === '') {
    stopOsc();
    startOsc();
  }

  var newText = string.slice(prevText.length);
  pulseOsc(require('string-to-binary')(newText));
  encodeString.apply(this, arguments);
  prevText = string;
}

module.exports = {
  stopOsc: stopOsc,
  onStringChange: encodeString,
  onStringChangeToWave: onStringChangeToWave,
  updateOsc: updateOsc
};

},{"string-to-binary":2}],2:[function(require,module,exports){
module.exports = function(str) {
  var pad = "00000000";

  return str.split('').map(function(str) {
    var binary = str.charCodeAt(0).toString(2);

    return pad.slice(binary.length)+binary;
  }).join('');
}

},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;base64,
